import com.google.gson.JsonObject;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import shop.myshop.SellService;

import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.*;

/**
 * –ñ–∏–≤—ñ —Ç–µ—Å—Ç–∏-–¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è –¥–æ {@link SellService}.
 * –ö–æ–∂–µ–Ω —Ç–µ—Å—Ç –æ–ø–∏—Å—É—î —Ç–∏–ø–æ–≤–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è.
 */
public class SellServiceTest {

    private SellService sellService;
    private Connection mockConnection;

    @BeforeEach
    void setUp() {
        // –°—Ç–≤–æ—Ä—é—î–º–æ –º–æ–∫-–∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î –ø–µ—Ä–µ–¥ –∫–æ–∂–Ω–∏–º —Ç–µ—Å—Ç–æ–º
        mockConnection = mock(Connection.class);
        sellService = new SellService(mockConnection);
    }

    @Test
    public void getModels_shouldReturnCatalogItemsFromDatabase() throws Exception {
        // –¶—ñ–ª—å: –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —â–æ getModels() –∫–æ—Ä–µ–∫—Ç–Ω–æ —á–∏—Ç–∞—î —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –∑ –ë–î

        PreparedStatement mockStatement = mock(PreparedStatement.class);
        ResultSet mockResultSet = mock(ResultSet.class);

        // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –º–æ–∫—ñ–≤
        when(mockConnection.prepareStatement(anyString())).thenReturn(mockStatement);
        when(mockStatement.executeQuery()).thenReturn(mockResultSet);
        when(mockResultSet.next()).thenReturn(true, false);
        when(mockResultSet.getInt("id")).thenReturn(1);
        when(mockResultSet.getString("category")).thenReturn("Electronics");
        when(mockResultSet.getString("name")).thenReturn("Laptop");
        when(mockResultSet.getDouble("price")).thenReturn(1000.0);
        when(mockResultSet.getInt("num")).thenReturn(2);

        // –í–∏–∫–ª–∏–∫
        var models = sellService.getModels();

        // üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏
        assertEquals(1, models.size());
        assertEquals("Electronics", models.getFirst().getCategory());
        assertEquals("Laptop", models.getFirst().getName());
        assertEquals(1000.0, models.getFirst().getPrice());
        assertEquals(2, models.getFirst().getNum());
    }

    @Test
    public void calculateTotal_shouldReturnSumOfAllItems() throws Exception {
        // –¶—ñ–ª—å: –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —â–æ –º–µ—Ç–æ–¥ –æ–±—á–∏—Å–ª—é—î —Å—É–º—É (—Ü—ñ–Ω–∞ √ó –∫—ñ–ª—å–∫—ñ—Å—Ç—å) –≤—Å—ñ—Ö —Ç–æ–≤–∞—Ä—ñ–≤

        PreparedStatement mockStatement = mock(PreparedStatement.class);
        ResultSet mockResultSet = mock(ResultSet.class);

        when(mockConnection.prepareStatement(anyString())).thenReturn(mockStatement);
        when(mockStatement.executeQuery()).thenReturn(mockResultSet);

        // –¢–µ—Å—Ç–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏: 2 √ó 10 + 3 √ó 20 = 80
        when(mockResultSet.next()).thenReturn(true, true, false);
        when(mockResultSet.getDouble("price")).thenReturn(10.0, 20.0);
        when(mockResultSet.getInt("num")).thenReturn(2, 3);

        double total = sellService.calculateTotal();

        assertEquals(80.0, total);
    }

    @Test
    public void getExchangeRates_shouldReturnParsedExchangeRates_whenApiSuccess() throws Exception {
        // –¶—ñ–ª—å: –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —â–æ API –ø–æ–≤–µ—Ä—Ç–∞—î –∫—É—Ä—Å–∏ –≤–∞–ª—é—Ç —ñ –≤–æ–Ω–∏ –∫–æ—Ä–µ–∫—Ç–Ω–æ –ø–∞—Ä—Å—è—Ç—å—Å—è

        String jsonResponse = """
                {
                    "result": "success",
                    "conversion_rates": {
                        "USD": 0.027,
                        "EUR": 0.025
                    }
                }
                """;

        HttpClient mockHttpClient = mock(HttpClient.class);
        HttpResponse mockHttpResponse = mock(HttpResponse.class);

        when(mockHttpClient.send(any(HttpRequest.class), any(HttpResponse.BodyHandler.class)))
                .thenReturn(mockHttpResponse);
        when(mockHttpResponse.body()).thenReturn(jsonResponse);

        JsonObject exchangeRates = sellService.getExchangeRates(mockHttpClient);

        assertEquals(0.027, exchangeRates.get("USD").getAsDouble());
        assertEquals(0.025, exchangeRates.get("EUR").getAsDouble());

        verify(mockHttpResponse).body();
    }

    @Test
    void getExchangeRates_shouldThrowException_whenApiFails() throws Exception {
        // –¶—ñ–ª—å: –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏, —â–æ –º–µ—Ç–æ–¥ –∫–∏–¥–∞—î –≤–∏–Ω—è—Ç–æ–∫ –ø—Ä–∏ –Ω–µ–≤–¥–∞–ª—ñ–π –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ API

        String jsonResponse = """
                {
                    "result": "failure",
                    "error-type": "invalid-key"
                }
                """;

        HttpClient mockHttpClient = mock(HttpClient.class);
        HttpResponse mockHttpResponse = mock(HttpResponse.class);

        when(mockHttpClient.send(any(HttpRequest.class), any(HttpResponse.BodyHandler.class)))
                .thenReturn(mockHttpResponse);
        when(mockHttpResponse.body()).thenReturn(jsonResponse);

        Exception exception = assertThrows(Exception.class, () -> sellService.getExchangeRates(mockHttpClient));

        assertEquals("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –∫—É—Ä—Å—ñ–≤ –≤–∞–ª—é—Ç", exception.getMessage());

        verify(mockHttpClient).send(any(HttpRequest.class), any(HttpResponse.BodyHandler.class));
        verify(mockHttpResponse).body();
    }
}
